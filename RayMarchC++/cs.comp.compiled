#version 430 core

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;
layout(r16ui, binding = 1) uniform uimage2D samplesOutput;
uniform float xOffset;
uniform float yOffset;
uniform float t;
uniform int total_samples;
uniform int number_samples;
uniform int current_sample;

uniform float focus_dist;
uniform float focal_length;
uniform float apeture_size;

#define MAX_STEPS 100
#define MAX_DIST 100.
#define MIN_DIST 0.0001
#define MOD_COUNT 3
#define MAX_PRIM_COUNT 5
//$define MOD_COUNT $MAX_MOD_COUNT
//$define MAX_PRIM_COUNT $MAX_PRIM_COUNT

struct DistanceResult {
    float distance;
};

//$ include structs.shader

layout(std430, binding = 0) buffer PrimitiveBlock {
    Primitive primitives[];
};

layout(std430, binding = 1) buffer GroupModifierBlock {
    GroupModifier group_modifier[];
};

layout(std430, binding = 2) buffer LightBlock {
    Light lights[];
};

uniform vec2 u_resolution;
uniform vec3 camera_pos;
uniform vec3 camera_pos_render;
uniform vec3 camera_dir_render;
uniform mat4 camera_rot;
uniform int u_prim_count;
uniform int u_group_count;

float de[MAX_PRIM_COUNT];

struct RayMarchResult {
    float dist;
    bool hit;
    vec3 color;
    int iters;
};

//$ include helpers.shader
//$ include sdf.shader
//$ include mods.shader

//float renderCamera(vec3 pt) {
//    vec3 transformed = camera_pos_render - pt;
//    return sphere(transformed, 0.1);
//}

DistanceResult getDist(vec3 pt) {
    int i;
    for (i = 0; i < u_prim_count; i++) {
        de[i] = MAX_DIST;
        vec3 transformed = primitives[i].transformation * (pt - primitives[i].position);

        for (int j = 0; j < MOD_COUNT; j++) {
            if(primitives[i].modifiers[j].modifier == 0){
                continue;
            }
            if (primitives[i].modifiers[j].modifier == 1) {
                transformed = mod_distort(primitives[i].modifiers[j], transformed);
            }
            else if (primitives[i].modifiers[j].modifier == 2) {
                transformed = mod_twist(primitives[i].modifiers[j], transformed);
            }
            else if (primitives[i].modifiers[j].modifier == 3) {
                transformed = mod_bend(primitives[i].modifiers[j], transformed);
            }
            else if (primitives[i].modifiers[j].modifier == 4) {
                transformed = mod_repetition(primitives[i].modifiers[j], transformed);
            }
            else if (primitives[i].modifiers[j].modifier == 5) {
                transformed = mod_repetition_limited(primitives[i].modifiers[j], transformed);
            }
        }

        if (primitives[i].prim_type == 1) {
            de[i] = modify_distance(sphere(transformed, primitives[i].attribute0), i);
        }
        else if (primitives[i].prim_type == 2) {
            de[i] = modify_distance(torus(transformed, primitives[i].attribute0, primitives[i].attribute1), i);
        }
        else if (primitives[i].prim_type == 3) {
            de[i] = modify_distance(cube(transformed, vec3(primitives[i].attribute0, primitives[i].attribute1, primitives[i].attribute2)), i);
        }
        else if (primitives[i].prim_type == 4) {
            de[i] = modify_distance(mandelbulb(transformed, primitives[i].attribute0, primitives[i].attribute1), i);
        }
        else if (primitives[i].prim_type == 5) {
            de[i] = modify_distance(julia(transformed, vec4(primitives[i].attribute0, primitives[i].attribute1, primitives[i].attribute2, primitives[i].attribute3), primitives[i].attribute4), i);
        }
    }

    float de_all = MAX_DIST;
    for (i = 0; i < u_prim_count; i++) {
        int found = 0;

        for (int j = 0; j < group_modifier.length(); j++) {
            if (group_modifier[j].modifier != 0 && (group_modifier[j].prim0 == i || group_modifier[j].prim1 == i || group_modifier[j].prim2 == i || group_modifier[j].prim3 == i)) {
                float de_cur = op(de[group_modifier[j].prim0], de[group_modifier[j].prim1], group_modifier[j]);

                if (group_modifier[j].prim2 != -1) {
                    de_cur = op(de_cur, de[group_modifier[j].prim2], group_modifier[j]);
                }
                if (group_modifier[j].prim3 != -1) {
                    de_cur = op(de_cur, de[group_modifier[j].prim3], group_modifier[j]);
                }

                de_all = min(de_all, de_cur);

                found = 1;
            }
        }
        if (found == 0) {
            de_all = min(de_all, de[i]);
        }
    }

    return DistanceResult(de_all);
}

vec3 getNormal(vec3 pt) {
    // distance of pt to closest object
    float dist = getDist(pt).distance;
    vec2 e = vec2(.01, 0);

    vec3 offset = dist - vec3(
        getDist(pt - e.xyy).distance,
        getDist(pt - e.yxy).distance,
        getDist(pt - e.yyx).distance);

    return normalize(offset);
}


RayMarchResult rayMarch(Ray r) {
    float marchDist = 0.;
    int i;
    bool hit = false;
    for (i = 0; i < MAX_STEPS; i++) {
        vec3 marchForward = r.ori + r.dir * marchDist;
        DistanceResult distToScene = getDist(marchForward);
        marchDist += distToScene.distance;
        if (marchDist > MAX_DIST) {
            break;
        }
        if (distToScene.distance < MIN_DIST) {
            hit = true;
            break;
        }
    }

    return RayMarchResult(marchDist, hit, vec3(0), i);
}

// input: point to be shaded
// output: light value
vec3 getLight(vec3 pt, vec3 ptNormal) {
    vec3 diff = vec3(0.0);
    for(int i = 0; i < lights.length(); i++){
        if(lights[i].type == 1){ // Point Light
            vec3 lightDir = vec3(lights[i].attribute0 - pt.x, lights[i].attribute1 - pt.y, lights[i].attribute2 - pt.z);
            float dist2 = dot(lightDir, lightDir);
            float dist = sqrt(dist2);
            lightDir = lightDir / dist;

            Ray shadowRay = Ray(pt + ptNormal * MIN_DIST * 2., lightDir);
            RayMarchResult shadowRayDist = rayMarch(shadowRay);

            if(shadowRayDist.dist < dist){
                continue;
            }
            float dif = clamp(dot(ptNormal, lightDir), 0., 1.) * (1.0 / (4.0 * 3.141569 * dist2));

            diff += dif * vec3(lights[i].colorR, lights[i].colorG, lights[i].colorB);
        }else if(lights[i].type == 2){
        vec3 lightDir = vec3(lights[i].attribute0, lights[i].attribute1, lights[i].attribute2);
            float dif = clamp(dot(ptNormal, -lightDir), 0., 1.);
            diff += dif * vec3(lights[i].colorR, lights[i].colorG, lights[i].colorB);
        }
    }
    return diff;
//    vec3 ptNormal = getNormal(pt);
//
//    vec3 lightDir = vec3(6.0 - pt.x, 2.0 - pt.y, 2.0 - pt.z);
//    float dist2 = dot(lightDir, lightDir);
//    float dist = sqrt(dist2);
//    lightDir = lightDir / dist;
//    Ray shadowRay = Ray(pt + ptNormal * MIN_DIST * 2., lightDir);
//    RayMarchResult shadowRayDist = rayMarch(shadowRay);
//    if(shadowRayDist.dist < dist){
//        return 0.0;
//    }
//    float dif = clamp(dot(ptNormal, lightDir), 0., 1.);
//    return dif * (1.0 / (4.0 * 3.141569 * dist2)) * 300.0;
}
vec3 getNormalColor(vec3 pt) {
    // normal direction from pt
    vec3 ptNormal = getNormal(pt);

    return (ptNormal * 2. + .5);
}

vec4 run(vec2 uvOrig, int cursample)
{
    vec2 uv = ((uvOrig.xy - 0.5) * u_resolution.xy) / u_resolution.y;

    float seed = float(baseHash(uvec2(uvOrig.x * 4392932 + gl_GlobalInvocationID.y + cursample * 23020331, + cursample * 23020331 + uvOrig.y * 2039192 + gl_GlobalInvocationID.x)))/float(0xffffffffU) + t;

    vec3 rayDir = normalize(vec3(uv.x, uv.y, -focal_length));
    vec3 rayOri = (vec4(randomInUnitDisk(seed), 0.0, 0.0)).xyz * apeture_size;
    rayDir = normalize((rayDir * focus_dist) - (rayOri));
    rayDir = (vec4(rayDir, 0.0) * camera_rot).xyz;

    Ray r = Ray((vec4(rayOri, 0.0) * camera_rot).xyz + camera_pos, rayDir);

    RayMarchResult dist = rayMarch(r);

    vec3 intersectPt = r.ori + r.dir * dist.dist;
    vec3 color = vec3(1.0, 1.0, 1.0);
    vec3 ptNormal = getNormal(intersectPt);
    vec3 light = getLight(intersectPt, ptNormal);

    color *= light;
    if (dist.hit) {
        color = max(color, vec3(0.12, 0.12, 0.12));
        
    }
    else {
        color = vec3(0.1, 0.1, 0.1);
    }

    // Output to screen
    return vec4(color.xyz, 1.0);
}
















void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.x + xOffset, gl_GlobalInvocationID.y + yOffset);

    vec4 cur = vec4(0.0, 0.0, 0.0, 1.0);

    for (int i = 0; i < number_samples; i++) {
        /*cur += vec4(
            gold_noise(vec2(gl_GlobalInvocationID.xy) + vec2(6.7, 7.8), t),
            gold_noise(vec2(gl_GlobalInvocationID.xy) + vec2(6.7, 7.8), t + 0.1),
            gold_noise(vec2(gl_GlobalInvocationID.xy) + vec2(6.7, 7.8), t + 0.2),
            0.0
        ) / total_samples;*/
        //cur += (run(vec2(float(texelCoord.x) / u_resolution.x, float(texelCoord.y) / u_resolution.y)) * gold_noise(vec2(gl_GlobalInvocationID.xy) + vec2(6.7, 7.8), t)) / total_samples;
        //cur += primitives[0].prim_type;
        //cur += group_modifier[0].prim1 / total_samples;
        cur += run(vec2(float(texelCoord.x) / u_resolution.x, float(texelCoord.y) / u_resolution.y), i) / total_samples;
        //cur += vec4(0.2, 0.2, 0.2, 0.0) / total_samples;
    }

    imageStore(imgOutput, texelCoord, cur + imageLoad(imgOutput, texelCoord));
    imageStore(samplesOutput, texelCoord, ivec4(number_samples + current_sample, 0, 0, 0));
}
